const Emitter = require('events');

const processEvents = new Emitter();
// eslint-disable-next-line no-multi-assign
exports = module.exports = processEvents;

const signalEvents = [
  // SIGINT из терминала поддерживается на всех платформах и может быть сгенерирован
  // посредством CTRL+C (можно перенастроить). Не генерируется, когда включен «сырой»
  // режим терминала. Если один этот сигнал имеет установленный слушатель, его поведение
  // по умолчанию будет удалено (Node.js больше не будет завершаться).
  {
    signal: 'SIGINT',
    alias: 'beforeExit',
    exit: true,
  },

  // SIGTERM не поддерживается на Windows, может иметь слушатель. Если один этот сигнал
  // имеет установленный слушатель, его поведение по умолчанию будет удалено
  // (Node.js больше не будет завершаться).
  {
    signal: 'SIGTERM',
    alias: 'beforeExit',
    exit: true,
  },

  // SIGHUP генерируется на Windows, когда закрывается окно консоли, на других платформах
  // также при подобных условиях (см. signal(7)). Он может иметь установленный слушатель,
  // однако, Node.js будет закрыт Windows спустя 10 секунд. На отличных от Windows платформах
  // поведение SIGHUP по умолчанию заключается в принудительном завершении Node.js,
  // но с установкой слушателя это поведение удаляется.
  {
    signal: 'SIGHUP',
    alias: 'beforeExit',
    exit: true,
  },

  // SIGBREAK работает на Windows, когда нажато <Ctrl> + <Break>, на не-Windows платформах его
  // можно слушать, но нельзя отправить или сгенерировать.
  {
    signal: 'SIGBREAK',
    alias: 'beforeExit',
    exit: true,
  },

  // Добавлено в v0.11.12
  // Событие ‘beforeExit’ генерируется тогда, когда Node.js исчерпывает цикл событий и не имеет
  // другой назначенной работы. Обычно процесс Node.js завершается, когда нет назначенной работы,
  // но слушатель, зарегестрированный в событии ‘beforeExit’ может совершать асинхронные вызовы,
  // и тем самым побудить процесс Node.js продолжаться. Функция обратного вызова слушателя имеет
  // значение process.exitCode, которое передается в качестве единственного аргумента. Событие
  // ‘beforeExit’ не генерируется при условиях, которые служат причиной явного прекращения процесса,
  // таких, например, как process.exit() или неотслеженные исключения. ‘beforeExit’ не должно
  // использоваться как альтернатива событию ‘exit’, за исключением случаев, когда нужно назначить
  // дополнительную работу.
  {
    signal: 'beforeExit',
    alias: 'beforeExit',
  },

  // Событие ‘exit’ генерируется, когда процесс Node.js закрывается, вследствие следующего:
  // метод process.exit() был вызван явно
  // цикл событий Node.js больше не содержит дополнительной работы
  // Нет способов предотвратить выход из цикла событий в таком случ
  // ае, и, когда все слушатели ‘exit’ завершаются, процесс Node.js будет прекращен.
  // Функции слушателей должны выполнять исключительно синхронные операции. Процесс Node.js
  // завершается непосредственно после вызова слушателей события ‘exit’, которые заставляют
  // процесс не обращать внимания на любую дополнительную работу в очереди.
  {
    signal: 'exit',
    alias: 'exit',
  },
];

let isHandled = false;

signalEvents.forEach((item) => {
  process.on(item.signal, () => {
    // console.log(`Recived signal ‘${item.signal}’`);

    if (isHandled) return;

    isHandled = true;

    processEvents.emit(item.alias);

    if (!item.exit) return;

    setTimeout(() => {
      process.exit();
    }, 5000);
  });
});
