/* eslint-disable no-multi-assign */

/**
 * Модуль реализует механизм запуска дочерних процессов и управления ими посредством
 * мультисерверного обмена сообщениями.
 * В основу его архитектуры модуля легли следующие соглашения:
 * - каждый процесс, включая главный имеет свой сервер. Причиной для такого решения послужило
 *   множество факторов, связанных в основном с исключением "слабого звена" (ситуации, когда
 *   падает главный процесс, через который происходит все взаимодействие)
 * - каждый процесс, включая главный имеет свой набор активных подключений к каждому из
 *   процессов, включая себя самого.
 * - все взаимодействие между процессами происходит через механизм отправки именованных событий
 *   путем установки их обработчиков
 *
 * события класса Cluster:
 * 'cluster.ready'      - текущий процесс установил двухстороннюю связь со всеми воркерами
 *                        и готов к работе
 * 'cluster.isMaster'   - текущий процесс был назначен мастерпроцессом
 * 'cluster.setmaster'  - один из воркеров назначен мастером. принимаеи pid этого воркера
 * 'cluster.stop'       - текущий процесс получил команду завершиться
 *
 * события класса Worker:
 * 'worker.ready'       - процесс связанный с этим воркером установил двухстороннюю связь со всеми
 *                        воркерами и готов к работе
 * 'worker.stop'        - процесс связанный с этим воркером получил команду завершиться
 *
 * Архитектура данного модуля реализует следующие принципы SOLID:
 * - [S] Принцип единственной ответственности (Модуль, как самостоятельный элемент сравнимый
 *       с классом инкапсулирует все ресурсы необходимые для своей работы)
 * - [I] Принцип разделения интерфейса (Cluster, Worker)
 *
 * Почему не применялись следующие следующие принципы SOLID:
 * - [O] Принцип открытости/закрытости (не представляю как его применить или неприменить
 *       в данном случае)
 * - [L] Принцип подстановки Лисков (Доводы теже что и в [O])
 * - [D] Принцип инверсии зависимостей (Доводы теже что и в [O])
 *
 * @example
 *
 * @module modules/nerwork
 *
 * @author Roman Surmanidze <lastuniverse@github.com>*
 */
exports = module.exports = require('./source/cluster.js');
