{"version":3,"sources":["js/polyfill.setImmediate.js","index.js","js/class.websocket.js","js/class.eventemitter.js"],"names":["window","setImmediate","head","tail","ID","Math","random","onmessage","e","data","func","next","addEventListener","attachEvent","postMessage","ws","url","timeout","__timeout","caсhe","isConnect","connect","setTimeout","console","log","this","connection","close","WebSocket","on","event","listener","error","init","emit","forEach","send","json","JSON","parse","action","string","stringify","push","EventEmitter","Modal","props","messages","state","display","message","shift","show","clearTimeout","timer","hide","i","key","join","map","renderMessage","setState","className","style","renderMessages","onClick","React","Component","Worker","pid","worker","alive","kill","status","generated","processed","renderButton","ClusterControls","fork","killall","Cluster","workers","info","Object","values","renderWorker","renderWorkerList","Main","ReactDOM","render","document","getElementById","mode","m","list","idx","indexOf","splice","length","args","g","removeListener"],"mappings":"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","file":"static/js/main.c33e6b2e.chunk.js","sourcesContent":["if (!window.setImmediate) window.setImmediate = (function() {\n  var head = { }, tail = head; // очередь вызовов, 1-связный список\n\n  var ID = Math.random(); // уникальный идентификатор\n\n  function onmessage(e) {\n    if(e.data !== ID) return; // не наше сообщение\n    head = head.next;\n    var func = head.func;\n    delete head.func;\n    func();\n  }\n\n  if(window.addEventListener) { // IE9+, другие браузеры\n    window.addEventListener('message', onmessage);\n  } else { // IE8\n    window.attachEvent( 'onmessage', onmessage );\n  }\n\n  return function(func) {\n    tail = tail.next = { func: func };\n    window.postMessage(ID, \"*\");\n  };\n}());","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WS from './js/class.websocket.js';\n\nvar ws = new WS('ws:\\/\\/lastuniverse.ru:80/cluster',5000); // хайлайтер косячит поэтому сделал так \\/\\/\n\n// ========================================\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.messages = [];\n    this.state = {\n      display: \"none\"\n    };\n\n    ws.send(\"worker.getfullinfo\");\n\n    ws.on(\"message\",(message)=>{\n      this.messages.push(message);\n\n      setTimeout(()=>{\n        this.messages.shift();\n      },5000);\n\n      this.show(message);\n\n      clearTimeout(this.timer);\n      this.timer = setTimeout(()=>{\n        this.hide();\n      },3000);\n    })\n  }\n        \n  renderMessage(messages,i){\n    return <p key={i}>{messages}</p>;\n  }\n\n  renderMessages(){\n    this.messages.join(\"\")\n    return this.messages.map((message,i)=>this.renderMessage(message,i));\n  }\n\n  show(message){\n    this.setState({\n      display: \"flex\"\n    });\n  }\n  hide(){\n    this.setState({\n      display: \"none\"\n    });\n  }\n  render() {\n    return (\n      <div className=\"modal\" style={{display: this.state.display}}>\n        {this.renderMessages()}\n        <button  className=\"modal-button\" onClick={() => this.hide()}>✖</button>\n      </div>\n    )\n  }\n}\n\n// ----------------------------------------\nclass Worker extends React.Component {\n  constructor(props) {\n    super(props);\n    // console.log(props)\n    // this.state(props.worker);\n  }\n\n  kill(pid){\n    ws.send(\"worker.kill\",this.props.worker.pid);\n  }\n\n  renderButton(){\n    if( !this.props.worker.alive ){ \n      return <div className=\"worker-button\">мертв</div>  \n    }\n    return <button className=\"worker-button\" onClick={() => this.kill()}>убить</button>\n  }\n  render() {\n    return (\n      <div className=\"worker\">\n        <div className=\"worker-info\">status: <b>{this.props.worker.status}</b></div>\n        <div className=\"worker-info\">pid: <b>{this.props.worker.pid}</b></div>\n        <div className=\"worker-info\"><b>{this.props.worker.generated}</b> / <b>{this.props.worker.processed}</b></div>\n        {this.renderButton()}\n      </div>\n    );\n  }\n}\n\n// ----------------------------------------\nclass ClusterControls extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {}\n  }\n\n  fork(){\n    ws.send(\"worker.fork\",true);\n  }\n\n  killall(){\n    ws.send(\"worker.killall\",true);\n  }\n\n  render() {\n    return (\n      <div className=\"cluster-controls\">\n        <button className=\"control-button\" onClick={() => this.fork()}>новый воркер</button>\n        <button className=\"control-button\" onClick={() => this.killall()}>убить все воркеры</button>\n      </div>\n    );\n  }\n}\n\n\n// ----------------------------------------\nclass Cluster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      workers: {},\n      info: {\n        generated: 0,\n        processed: 0,\n      }\n    };\n\n    ws.on(\"worker.list\", (workers)=>{\n      this.setState({workers: workers});\n    });\n    ws.on(\"cluster.info\", (info)=>{\n      this.setState({info: info});\n    });\n    ws.on(\"connection\", (info)=>{\n      ws.send(\"worker.getlist\",true);  \n    });\n\n    \n  }\n\n  renderWorker(worker){\n    return <Worker key={worker.pid} worker={worker} />;\n  }\n\n  renderWorkerList(){\n    return Object.values(this.state.workers).map(worker=>this.renderWorker(worker));\n  }\n\n  render() {\n    return (\n      <div className=\"cluster\">\n        <div className=\"cluster-info\">{this.state.info.generated} / {this.state.info.processed}</div>\n        <div className=\"workers-list\">\n          {this.renderWorkerList()}\n        </div>\n        <ClusterControls />\n      </div>\n    );\n  }\n}\n\n// ----------------------------------------\nclass Main extends React.Component {\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"block-left\">\n          <Cluster />\n        </div>\n        <div className=\"block-right\">\n        </div>\n        <div>\n          <Modal />\n        </div>\n      </div>\n    );\n  }\n}\n// ========================================\n\nReactDOM.render(\n  <Main />,document.getElementById('root')\n);\n\n","import EventEmitter from './class.eventemitter.js';\n\n// const test = new EventEmitter();\n// test.on(\"test\",(data,text)=>{\n//   console.log(data,text);\n// });\n// test.emit(\"test\",{test:\"222\"},111);\n\n\n/**\n * Создаем класс для упрощения работы с веб сокетами\n */\nexport default class WS extends EventEmitter{\n\t/**\n\t * @param  {String} url     Адрес сервера\n\t * @param  {Number} timeout время отсрочки переподключения к серверу при потере связи\n\t */\n\tconstructor(url,timeout){\n\t\tsuper();\n\t\tthis.url = url;\n\t\tthis.timeout = 0;\n\t\tthis.__timeout = timeout||30000;\n\t\tthis.caсhe =[];\n\t\tthis.isConnect = false;\n\t\tthis.connect();\n\t}\n\n\t/**\n\t * Функция отсрочки запуска подключения к интернету\n\t */\n\tinit(){\n\t\tsetTimeout(()=>{\n\t\t\tconsole.log(\"Пытаюсь переподключиться к\", this.url);\n\t\t\tthis.connect();\n\t\t}, this.timeout);\t\t\n\t}\n\n\t/**\n\t * функция подключеня к серверу, инициализируюшая обработчики событий error, close, open, message\n\t */\n\tconnect(){\n\t\tif(this.connection) this.connection.close();\n\t\tthis.connection = new WebSocket(this.url);\n\t\tthis.connection.on = (event, listener)=>{\n\t\t\tthis.connection[\"on\"+event] = listener;\n\t\t};\n\n\t\tthis.connection.on(\"error\", error=>{\n\t\t\tthis.isConnect = false;\n\t\t\tconsole.log(\"Ошибка подключения:\", error);\n\t\t\tthis.init();\n\t\t});\n\t\tthis.connection.on(\"close\", ()=>{\n\t\t\tthis.isConnect = false;\n\t\t\tconsole.log(\"Соединение закрыто сервером\");\n\t\t\tthis.init();\n\t\t});\t\t\t\n\t\tthis.connection.on(\"open\", ()=>{\n\t\t\tthis.timeout = this.__timeout;\n\t\t\tthis.isConnect = true;\n\t\t\tthis.emit(\"connection\")\n\t\t\tconsole.log(\"Подключился к\", this.url);\n\t\t\tthis.caсhe.forEach(data=>{\n\t\t\t\tthis.connection.send(data);\n\t\t\t});\n\t\t\tthis.caсhe = [];\n\t\t});\n\t\tthis.connection.on(\"message\", (event)=>{\n\t\t\ttry {\n\t\t\t\tconst json = JSON.parse(event.data)\n\t\t\t\tif(!json.action) return;\n\t\t\t\tthis.emit(json.action, ...json.data);\n\t\t\t} catch(e) {\n\t\t\t\t// это не наш тип сообщений, просто игнорируем \n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Отправить информацию (текст, число, массив, объект и т.д.) на сервер. При отсутствии подключения кэширует отправляемую информацию\n\t * @param  {...} data отправляемая информация\n\t * @return {Promise}      возвращает промис, который сработает, когда прийдет ответ с сервера именно на это сообщение\n\t */\n\tsend(action, ...data){\n\t\tconst json = {\n\t\t\taction: action,\n\t\t\tdata: data\n\t\t};\n\t\tconst string = JSON.stringify(json);\n\n\t\tif(!this.isConnect || !this.connection){\n\t\t\tthis.caсhe.push(string);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.connection.send(string);\n\t}\n\n}\n\n\n\n","import './polyfill.setImmediate.js';\n\nexport default class EventEmitter {\n\tconstructor(mode = \"async\") {\n\t\tthis.m = mode;\n\t\tthis.e = {};\n\t}\n\n\n\t/**\n\t * Устанавливает обработчик listener события event\n\t * @param  {String}   event    название события\n\t * @param  {Function} listener обработчик события\n\t */\n\ton(event, listener) {\n\t\tif (typeof this.e[event] !== 'object') {\n\t\t\tthis.e[event] = [];\n\t\t}\n\n\t\tthis.e[event].push(listener);\n\t\treturn listener;\n\t}\n\n\t/**\n\t * Удаляет обработчик listener события event\n\t * @param  {String}   event    название события\n\t * @param  {Function} listener обработчик события\n\t */\n\tremoveListener(event, listener) {\n\t\tconst list = this.e[event];\n\n\t\tif (typeof list !== 'object')\n\t\t\treturn;\n\n\t\tconst idx = list.indexOf(listener);\n\t\tif (idx < 0)\n\t\t\treturn;\n\n\t\tlist.splice(idx, 1);\n\t\t\n\t\tif(!list.length)\n\t\t\tdelete this.e[event];\n\t}\n\n\n\t/**\n\t * Создает событие event вызывая все \n\t * зарегестрированные для него обработчики\n\t * @param  {String}   event    название события\n\t * @param  {...[type]} args  аргументы для обработчиков событий\n\t */\n\temit(event, ...args) {\n\t\tconst list = this.e[event];\n\t\tif (typeof list !== 'object')\n\t\t\treturn;\n\t\tif(this.m === \"sync\"){\n\t\t\tlist.forEach(listener => listener(...args));\n\t\t}else{\n\t\t \tlist.forEach(listener=>setImmediate(()=>listener(...args)));\n\t\t}\n\t}\n\n\t/**\n\t * Устанавливает одноразовый обработчик listener события event\n\t * @param  {String}   event    название события\n\t * @param  {Function} listener обработчик события\n\t */\n\tonce(event, listener) {\n\t\tconst g = (...args)=>{\n\t\t\tthis.removeListener(event, g);\n\t\t\tlistener(...args);\n\t\t}\t\t\t\n\t\tthis.on(event, g);\n\t\treturn listener;\n\t}\n}\n\n// var events = new EventEmitter();\n// events.on(\"test\",()=>{let a=1;});\n\n\n"],"sourceRoot":""}