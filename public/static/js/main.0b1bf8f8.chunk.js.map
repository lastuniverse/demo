{"version":3,"sources":["index.js"],"names":["Game","props","size","state","history","squares","Array","fill","stepNumber","xIsNext","i","this","slice","length","calculateWinner","setState","concat","step","status","current","winner","len","line","y","className","map","v","x","key","value","onClick","handleClick","square","moves","move","desc","jumpTo","React","Component","findline","dx","dy","s","ReactDOM","render","document","getElementById"],"mappings":"oOAIMA,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,KAAO,GACZ,EAAKC,MAAQ,CACXC,QAAS,CAAC,CACRC,QAASC,MAAM,EAAKJ,KAAK,EAAKA,MAAMK,KAAK,QAE3CC,WAAY,EACZC,SAAS,GARM,E,wDAYPC,GACV,IAAMN,EAAUO,KAAKR,MAAMC,QAAQQ,MAAM,EAAGD,KAAKR,MAAMK,WAAa,GAE9DH,EADUD,EAAQA,EAAQS,OAAS,GACjBR,QAAQO,QAC5BE,EAAgBT,EAASM,KAAKT,OAASG,EAAQK,KAGnDL,EAAQK,GAAKC,KAAKR,MAAMM,QAAU,IAAM,IACxCE,KAAKI,SAAS,CACZX,QAASA,EAAQY,OAAO,CAAC,CACvBX,QAASA,KAEXI,SAAUE,KAAKR,MAAMM,QACrBD,WAAYJ,EAAQS,Y,6BAIjBI,GACLN,KAAKI,SAAS,CACZP,WAAYS,EACZR,QAAUQ,EAAO,IAAO,M,+BAMlB,IAuDJC,EAvDG,OACDd,EAAUO,KAAKR,MAAMC,QACrBe,EAAUf,EAAQO,KAAKR,MAAMK,YAC7BY,EAASN,EAAgBK,EAAQd,QAAQM,KAAKT,MAE9CmB,EAAMf,MAAMK,KAAKT,MAAMK,MAAK,GAc5Be,EAAO,SAACC,GAEZ,OACE,yBAAKC,UAAU,aAfJ,SAACD,GACd,OAAOF,EAAII,KAAI,SAACC,EAAEC,GAChB,IAAMjB,EAAIa,EAAE,EAAKrB,KAAKyB,EACtB,OACE,4BAAQH,UAAU,SAASI,IAAKlB,EAAGmB,MAAOV,EAAQT,GAAIoB,QAAS,kBAAM,EAAKC,YAAYrB,KACnFS,EAAQd,QAAQK,OAWlBsB,CAAOT,KAoBRU,EAAQ7B,EAAQqB,KAAI,SAACR,EAAMiB,GAC/B,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,wBAAIN,IAAKM,GACP,4BAAQJ,QAAS,kBAAM,EAAKM,OAAOF,KAAQC,OAiBjD,OATEjB,EADEE,EACO,WAAaA,EAEb,iBAAmBT,KAAKR,MAAMM,QAAU,IAAM,KAQvD,yBAAKe,UAAU,QACb,yBAAKA,UAAU,cAtCVH,EAAII,KAAI,SAACC,EAAEH,GAChB,IAAMK,EAAM,IAAIL,EAChB,OACE,yBAAKK,IAAKA,GACPN,EAAKC,QAqCV,yBAAKC,UAAU,aACb,6BAAMN,GACN,4BAAKe,S,GAhHII,IAAMC,YA8HzB,SAASxB,EAAgBT,EAASH,GAChC,SAASqC,EAASZ,EAAEJ,EAAEiB,EAAGC,GAEvB,IADA,IAAIC,EAAIrC,EAAQkB,EAAErB,EAAKyB,GACfjB,EAAE,EAAGA,EAAI,EAAGA,IAAI,CAGtB,GADAa,GAAGkB,GADHd,GAAGa,IAEKtC,GAAQqB,GAAGrB,EAAM,OAAO,KAChC,GAAGyB,EAAI,GAAKJ,EAAE,EAAG,OAAO,KACxB,GAAGmB,GAAKrC,EAAQkB,EAAErB,EAAKyB,GAAI,OAAO,KAEpC,OAAOe,EAET,IAAI,IAAIf,EAAE,EAAGA,EAAIzB,EAAMyB,IACrB,IAAI,IAAIJ,EAAE,EAAGA,EAAIrB,EAAMqB,IAAI,CACzB,IAAImB,EAAIrC,EAAQkB,EAAErB,EAAKyB,GACvB,GAAGY,EAASZ,EAAEJ,EAAE,EAAE,GAAI,OAAOmB,EAC7B,GAAGH,EAASZ,EAAEJ,EAAE,EAAE,GAAI,OAAOmB,EAC7B,GAAGH,EAASZ,EAAEJ,EAAE,EAAE,GAAI,OAAOmB,EAC7B,GAAGH,EAASZ,EAAEJ,EAAE,GAAG,GAAI,OAAOmB,EAGlC,OAAO,KA1BTC,IAASC,OACP,kBAAC5C,EAAD,MACA6C,SAASC,eAAe,W","file":"static/js/main.0b1bf8f8.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.size = 30;\n    this.state = {\n      history: [{\n        squares: Array(this.size*this.size).fill(null)\n      }],\n      stepNumber: 0,\n      xIsNext: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares, this.size) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  \n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares,this.size);\n\n    const len = Array(this.size).fill(true);\n\n    const square = (y) => {\n      return len.map((v,x) => {\n        const i = y*this.size+x;\n        return (\n          <button className=\"square\" key={i} value={current[i]} onClick={() => this.handleClick(i)} >\n            {current.squares[i]}\n          </button>  \n        );\n      });\n\n    };\n\n    const line = (y) =>{\n      \n      return (\n        <div className=\"board-row\">\n          {square(y)}\n        </div>\n      );\n    };\n\n\n    const board = () => {\n      return len.map((v,y) => {\n        const key = 'l'+y;\n        return (\n          <div key={key}>\n            {line(y)}\n          </div>\n        );\n      });\n    };\n\n\n\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n          // <Board\n          //   squares={current.squares}\n          //   onClick={(i) => this.handleClick(i)}\n          // />\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          {board()}\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares, size) {\n  function findline(x,y,dx,dy) {\n    let s = squares[y*size+x];\n    for(let i=1; i < 5; i++){\n      x+=dx;\n      y+=dy;\n      if(x >= size || y>=size) return null;\n      if(x < 0 || y<0) return null;\n      if(s != squares[y*size+x]) return null;\n    }\n    return s;\n  }\n  for(let x=0; x < size; x++){\n    for(let y=0; y < size; y++){\n      let s = squares[y*size+x];\n      if(findline(x,y,0,1)) return s;\n      if(findline(x,y,1,0)) return s;\n      if(findline(x,y,1,1)) return s;\n      if(findline(x,y,1,-1)) return s;\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""}